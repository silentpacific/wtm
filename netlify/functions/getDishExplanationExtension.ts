import type { Handler, HandlerEvent } from "@netlify/functions";
import { GoogleGenAI, Type } from "@google/genai";

const explanationSchema = {
    type: Type.OBJECT,
    properties: {
        explanation: {
            type: Type.STRING,
            description: "A concise explanation of the dish in under 300 characters. Should be easy for a tourist to understand."
        },
        tags: {
            type: Type.ARRAY,
            description: "An array of dietary and flavor tags (e.g., 'Vegetarian', 'Vegan', 'Gluten-Free', 'Spicy', 'Sweet', 'Grilled', 'Fried').",
            items: {
                type: Type.STRING
            }
        },
        allergens: {
            type: Type.ARRAY,
            description: "An array of allergen information (e.g., 'Contains Nuts', 'Contains Dairy', 'Contains Gluten', 'Contains Shellfish', 'Contains Eggs').",
            items: {
                type: Type.STRING
            }
        },
        cuisine: {
            type: Type.STRING,
            description: "The specific cuisine type (e.g., 'Italian', 'Japanese', 'Mexican', 'Indian', 'Thai', 'French', 'Chinese', 'Mediterranean', 'American', 'Korean', 'Vietnamese', 'Greek', 'Spanish', 'Lebanese', 'Moroccan', etc.). Be specific and precise."
        }
    },
    required: ["explanation", "tags", "allergens", "cuisine"]
};

const geminiApiKey = process.env.GEMINI_API_KEY;

// Simple in-memory rate limiting for extensions
interface RateLimitEntry {
    count: number;
    resetTime: number;
}

const rateLimitMap = new Map<string, RateLimitEntry>();

function checkRateLimit(identifier: string, maxRequests: number = 60, windowMs: number = 3600000): boolean {
    const now = Date.now();
    const entry = rateLimitMap.get(identifier);

    if (!entry || now > entry.resetTime) {
        rateLimitMap.set(identifier, {
            count: 1,
            resetTime: now + windowMs
        });
        return true;
    }

    if (entry.count >= maxRequests) {
        return false;
    }

    entry.count++;
    return true;
}

const getLanguagePrompt = (dishName: string, language: string): string => {
    const baseInstructions = {
        en: `You are a culinary expert. Explain the dish "${decodeURIComponent(dishName)}". 
        Provide a concise explanation suitable for a tourist in under 300 characters. 
        
        For tags, include: dietary restrictions (Vegetarian, Vegan, Gluten-Free, Dairy-Free), cooking methods (Grilled, Fried, Steamed, Raw), and flavor profiles (Spicy, Sweet, Savory, Mild, Hot).
        
        For allergens, specifically list what the dish contains using this format: "Contains [allergen]" (e.g., "Contains Nuts", "Contains Dairy", "Contains Gluten", "Contains Shellfish", "Contains Eggs", "Contains Fish", "Contains Soy").
        
        For cuisine, identify the specific cuisine type (e.g., "Italian", "Japanese", "Mexican", "Indian", "Thai", "French", "Chinese", "Mediterranean", "American", "Korean", "Vietnamese", "Greek", "Spanish", "Lebanese", "Moroccan", etc.). Be specific - use the most precise cuisine classification.
        
        If the dish doesn't contain common allergens, return an empty array for allergens.
        
        Respond in the requested JSON format.`,
        
        es: `Eres un experto culinario. Explica el plato "${decodeURIComponent(dishName)}". 
        Proporciona una explicaci√≥n concisa adecuada para un turista en menos de 300 caracteres. 
        
        Para las etiquetas, incluye: restricciones diet√©ticas (Vegetariano, Vegano, Sin Gluten, Sin L√°cteos), m√©todos de cocci√≥n (A la Parrilla, Frito, Al Vapor, Crudo), y perfiles de sabor (Picante, Dulce, Salado, Suave, Caliente).
        
        Para los al√©rgenos, especifica espec√≠ficamente lo que contiene el plato usando este formato: "Contiene [al√©rgeno]" (ej., "Contiene Frutos Secos", "Contiene L√°cteos", "Contiene Gluten", "Contiene Mariscos", "Contiene Huevos", "Contiene Pescado", "Contiene Soja").
        
        Para la cocina, identifica el tipo espec√≠fico de cocina (ej., "Italiana", "Japonesa", "Mexicana", "India", "Tailandesa", "Francesa", "China", "Mediterr√°nea", "Americana", "Coreana", "Vietnamita", "Griega", "Espa√±ola", "Libanesa", "Marroqu√≠", etc.). S√© espec√≠fico - usa la clasificaci√≥n de cocina m√°s precisa.
        
        Si el plato no contiene al√©rgenos comunes, devuelve un array vac√≠o para los al√©rgenos.
        
        Responde en el formato JSON solicitado, pero con todo el contenido en espa√±ol.`,
        
        zh: `‰Ω†ÊòØ‰∏Ä‰ΩçÁÉπÈ•™‰∏ìÂÆ∂„ÄÇËØ∑Ëß£Èáä"${decodeURIComponent(dishName)}"ËøôÈÅìËèú„ÄÇ
        ‰∏∫Ê∏∏ÂÆ¢Êèê‰æõ300Â≠óÁ¨¶‰ª•ÂÜÖÁöÑÁÆÄÊòéËß£Èáä„ÄÇ
        
        Ê†áÁ≠æÂåÖÊã¨ÔºöÈ•ÆÈ£üÈôêÂà∂ÔºàÁ¥†È£ü„ÄÅÁ∫ØÁ¥†„ÄÅÊó†È∫∏Ë¥®„ÄÅÊó†‰π≥Âà∂ÂìÅÔºâÔºåÁÉπÈ•™ÊñπÊ≥ïÔºàÁÉ§Âà∂„ÄÅÊ≤πÁÇ∏„ÄÅËí∏Âà∂„ÄÅÁîüÈ£üÔºâÔºå‰ª•ÂèäÂè£Âë≥ÁâπÂæÅÔºàËæõËæ£„ÄÅÁîú„ÄÅÂí∏„ÄÅÊ∏©Âíå„ÄÅÁÉ≠Ôºâ„ÄÇ
        
        ÂØπ‰∫éËøáÊïèÂéüÔºåËØ∑ÂÖ∑‰ΩìÂàóÂá∫ËèúÂìÅÂåÖÂê´ÁöÑÊàêÂàÜÔºå‰ΩøÁî®Ê≠§Ê†ºÂºèÔºö"Âê´Êúâ[ËøáÊïèÂéü]"ÔºàÂ¶Ç"Âê´ÊúâÂùöÊûú"„ÄÅ"Âê´Êúâ‰π≥Âà∂ÂìÅ"„ÄÅ"Âê´ÊúâÈ∫∏Ë¥®"„ÄÅ"Âê´ÊúâË¥ùÁ±ª"„ÄÅ"Âê´ÊúâÈ∏°Ëõã"„ÄÅ"Âê´ÊúâÈ±ºÁ±ª"„ÄÅ"Âê´ÊúâÂ§ßË±Ü"Ôºâ„ÄÇ
        
        ÂØπ‰∫éËèúÁ≥ªÔºåËØ∑ËØÜÂà´ÂÖ∑‰ΩìÁöÑËèúÁ≥ªÁ±ªÂûãÔºàÂ¶Ç"‰∏≠Âºè"„ÄÅ"Êó•Âºè"„ÄÅ"ÊÑèÂºè"„ÄÅ"Âç∞Â∫¶"„ÄÅ"Ê≥∞Âºè"„ÄÅ"Ê≥ïÂºè"„ÄÅ"Âú∞‰∏≠Êµ∑"„ÄÅ"ÁæéÂºè"„ÄÅ"Èü©Âºè"„ÄÅ"Ë∂äÂºè"„ÄÅ"Â∏åËÖä"„ÄÅ"Ë•øÁè≠Áâô"„ÄÅ"ÈªéÂ∑¥Â´©"„ÄÅ"Êë©Ê¥õÂì•"Á≠âÔºâ„ÄÇËØ∑ÂÖ∑‰Ωì - ‰ΩøÁî®ÊúÄÁ≤æÁ°ÆÁöÑËèúÁ≥ªÂàÜÁ±ª„ÄÇ
        
        Â¶ÇÊûúËèúÂìÅ‰∏çÂê´Â∏∏ËßÅËøáÊïèÂéüÔºåËØ∑‰∏∫ËøáÊïèÂéüËøîÂõûÁ©∫Êï∞ÁªÑ„ÄÇ
        
        ËØ∑Áî®‰∏≠ÊñáÂõûÂ∫îÔºåÂπ∂‰ΩøÁî®ËØ∑Ê±ÇÁöÑJSONÊ†ºÂºè„ÄÇ`,
        
        fr: `Vous √™tes un expert culinaire. Expliquez le plat "${decodeURIComponent(dishName)}". 
        Fournissez une explication concise adapt√©e √† un touriste en moins de 300 caract√®res.
        
        Pour les √©tiquettes, incluez: restrictions alimentaires (V√©g√©tarien, V√©gan, Sans Gluten, Sans Lactose), m√©thodes de cuisson (Grill√©, Frit, Vapeur, Cru), et profils de saveur (√âpic√©, Sucr√©, Sal√©, Doux, Chaud).
        
        Pour les allerg√®nes, sp√©cifiez sp√©cifiquement ce que contient le plat en utilisant ce format: "Contient [allerg√®ne]" (ex., "Contient Noix", "Contient Produits Laitiers", "Contient Gluten", "Contient Fruits de Mer", "Contient ≈íufs", "Contient Poisson", "Contient Soja").
        
        Pour la cuisine, identifiez le type de cuisine sp√©cifique (ex., "Italienne", "Japonaise", "Mexicaine", "Indienne", "Tha√Ølandaise", "Fran√ßaise", "Chinoise", "M√©diterran√©enne", "Am√©ricaine", "Cor√©enne", "Vietnamienne", "Grecque", "Espagnole", "Libanaise", "Marocaine", etc.). Soyez sp√©cifique - utilisez la classification culinaire la plus pr√©cise.
        
        Si le plat ne contient pas d'allerg√®nes courants, retournez un tableau vide pour les allerg√®nes.
        
        R√©pondez au format JSON demand√©, mais avec tout le contenu en fran√ßais.`
    };
    
    return baseInstructions[language as keyof typeof baseInstructions] || baseInstructions.en;
};

export const handler: Handler = async (event: HandlerEvent) => {
    const startTime = Date.now();

    // CORS headers - more permissive for extension
    const corsHeaders = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, User-Agent',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Credentials': 'false'
    };

    // Handle preflight requests
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers: corsHeaders,
            body: ''
        };
    }

    // Only allow POST requests
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: corsHeaders,
            body: JSON.stringify({ error: 'Method not allowed. Use POST.' })
        };
    }

    // Rate limiting by IP (more generous for extensions)
    const clientIP = event.headers['x-forwarded-for']?.split(',')[0] || 
                     event.headers['x-real-ip'] || 
                     'unknown';
    
    if (!checkRateLimit(clientIP, 60, 3600000)) { // 60 requests per hour
        return {
            statusCode: 429,
            headers: corsHeaders,
            body: JSON.stringify({ 
                error: 'Too many requests. Please wait before trying again.' 
            })
        };
    }

    // Parse request body
    let requestBody;
    try {
        if (!event.body) {
            return {
                statusCode: 400,
                headers: corsHeaders,
                body: JSON.stringify({ error: 'Request body is required' })
            };
        }
        requestBody = JSON.parse(event.body);
    } catch (parseError) {
        return {
            statusCode: 400,
            headers: corsHeaders,
            body: JSON.stringify({ error: 'Invalid JSON in request body' })
        };
    }

    const { dishName, language } = requestBody;

    // Validate required fields
    if (!dishName) {
        return { 
            statusCode: 400, 
            headers: corsHeaders,
            body: JSON.stringify({ error: "dishName is required." })
        };
    }

    // Validate language parameter, default to English
    const supportedLanguages = ['en', 'es', 'zh', 'fr'];
    const selectedLanguage = language && supportedLanguages.includes(language) ? language : 'en';
    
    console.log(`üåç [Extension] Using language: ${selectedLanguage}`);

    if (!geminiApiKey) {
        return { 
            statusCode: 500, 
            headers: corsHeaders,
            body: JSON.stringify({ error: "Server configuration error." })
        };
    }

    try {
        console.log(`üîç [Extension] Processing dish explanation request: "${dishName}"`);
        
        // Call Gemini API directly (no database caching for extension to keep it simple)
        const ai = new GoogleGenAI({ apiKey: geminiApiKey });
        const prompt = getLanguagePrompt(dishName);
        const textPart = { text: prompt };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: { parts: [textPart] },
            config: {
                responseMimeType: "application/json",
                responseSchema: explanationSchema,
            },
        });

        const jsonText = response.text.trim();
        const dishExplanation = JSON.parse(jsonText);

        console.log(`‚úÖ [Extension] Successfully explained: "${dishName}"`);
        
        return {
            statusCode: 200,
            headers: {
                ...corsHeaders,
                'Content-Type': 'application/json',
                'X-Data-Source': 'Gemini-API-Extension',
                'X-Processing-Time': (Date.now() - startTime).toString()
            },
            body: JSON.stringify(dishExplanation)
        };

    } catch (error) {
        console.error("‚ùå [Extension] Error in getDishExplanationExtension function:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown internal error occurred.";
        return {
            statusCode: 500,
            headers: corsHeaders,
            body: JSON.stringify({ 
                error: `Failed to get explanation for "${dishName}". Reason: ${errorMessage}` 
            })
        };
    }
};